module multiply (
    input a[8],
    input b[8],
    output mul[16]
  ) {
  
  sig p0[8];
  sig p1[8];
  sig p2[8];
  sig p3[8];
  sig p4[8];
  sig p5[8];
  sig p6[8];
  sig p7[8];

  
  always {
   
   p0[7:0] = (8x{a[0]}) & (b[7:0]);
   p1[7:0] = ((8x{a[1]}) & (b[7:0])) << 1;
   p2[7:0] = ((8x{a[2]}) & (b[7:0])) << 2;
   p3[7:0] = ((8x{a[3]}) & (b[7:0])) << 3;
   p4[7:0] = ((8x{a[4]}) & (b[7:0])) << 4;
   p5[7:0] = ((8x{a[5]}) & (b[7:0])) << 5;
   p6[7:0] = ((8x{a[6]}) & (b[7:0])) << 6;
   p7[7:0] = ((8x{a[7]}) & (b[7:0])) << 7;
    
    
   mul = p0 + p1 + p2 + p3 + p4 + p5 + p6 + p7;
   
   
  }
}
